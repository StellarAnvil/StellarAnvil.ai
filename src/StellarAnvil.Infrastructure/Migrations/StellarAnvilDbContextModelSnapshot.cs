// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StellarAnvil.Infrastructure.Data;

#nullable disable

namespace StellarAnvil.Infrastructure.Migrations
{
    [DbContext(typeof(StellarAnvilDbContext))]
    partial class StellarAnvilDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StellarAnvil.Domain.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ApiKeys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 677, DateTimeKind.Utc).AddTicks(4700),
                            IsActive = true,
                            Key = "sk-admin-5ff4ac7fb8fb46b68a8f3d105c4c1d3e",
                            Name = "Default Admin Key",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 677, DateTimeKind.Utc).AddTicks(4850),
                            IsActive = true,
                            Key = "sk-openapi-42638e03f1be4473b374283048eebb7a",
                            Name = "Default OpenAPI Key",
                            Type = 2
                        });
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.McpConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Type")
                        .IsUnique();

                    b.ToTable("McpConfigurations");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentState")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromState")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeamMemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("ToState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrentTaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SystemPrompt")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTaskId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Workflows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(2260),
                            Description = "Complete software development lifecycle with all phases",
                            IsDefault = true,
                            Name = "Full SDLC Workflow",
                            UpdatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(2400)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7560),
                            Description = "Standard software development lifecycle without UX design",
                            IsDefault = true,
                            Name = "Standard SDLC Workflow",
                            UpdatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7560)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7720),
                            Description = "Simplified software development lifecycle for small changes",
                            IsDefault = true,
                            Name = "Simple SDLC Workflow",
                            UpdatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7720)
                        });
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.WorkflowTransition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromState")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredRole")
                        .HasColumnType("integer");

                    b.Property<int>("ToState")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId", "FromState", "ToState")
                        .IsUnique();

                    b.ToTable("WorkflowTransitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("849c451d-a904-4cea-b950-b0f915e88f17"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7290),
                            FromState = 1,
                            Order = 1,
                            RequiredRole = 1,
                            ToState = 2,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("cabc4b4e-e02f-4e19-8832-9632542864f4"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7430),
                            FromState = 2,
                            Order = 2,
                            RequiredRole = 2,
                            ToState = 3,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("170f122a-c079-4be0-b11c-3d4eab29940c"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7440),
                            FromState = 3,
                            Order = 3,
                            RequiredRole = 3,
                            ToState = 4,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("78b7310f-8c26-48fe-8f22-4be937b717d3"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7440),
                            FromState = 4,
                            Order = 4,
                            RequiredRole = 4,
                            ToState = 5,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("95cf06f3-94fc-46f3-9939-984325d342f7"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7450),
                            FromState = 5,
                            Order = 5,
                            RequiredRole = 5,
                            ToState = 6,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("07cee5a3-57c0-4f9c-9514-18cfbdcb28e0"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7460),
                            FromState = 6,
                            Order = 6,
                            RequiredRole = 6,
                            ToState = 8,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("bf9ebbef-29a8-42aa-b010-3776637c9953"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7610),
                            FromState = 1,
                            Order = 1,
                            RequiredRole = 1,
                            ToState = 2,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("5605854f-b9bb-4a31-a220-6b739c723e0a"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7620),
                            FromState = 2,
                            Order = 2,
                            RequiredRole = 2,
                            ToState = 3,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("a6fba73c-6681-4464-94c5-2c3f156bbdb8"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7630),
                            FromState = 3,
                            Order = 3,
                            RequiredRole = 3,
                            ToState = 5,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("ca807a9e-613e-44d7-8931-f53becd82214"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7640),
                            FromState = 5,
                            Order = 4,
                            RequiredRole = 5,
                            ToState = 6,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("31487040-28f9-44e4-805d-8f77fd3ac064"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7640),
                            FromState = 6,
                            Order = 5,
                            RequiredRole = 6,
                            ToState = 8,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("bf366279-3a28-41b0-a64c-d3c6d56e651a"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7740),
                            FromState = 1,
                            Order = 1,
                            RequiredRole = 1,
                            ToState = 2,
                            WorkflowId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("9024b3d0-c31b-4aa5-9e57-fb9217431b33"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7750),
                            FromState = 2,
                            Order = 2,
                            RequiredRole = 2,
                            ToState = 5,
                            WorkflowId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("caa165d8-d5a6-4f3c-872b-7587d3362c6e"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7760),
                            FromState = 5,
                            Order = 3,
                            RequiredRole = 5,
                            ToState = 6,
                            WorkflowId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("370668fb-c143-4906-aa46-3e4552eeed98"),
                            CreatedAt = new DateTime(2025, 9, 23, 17, 54, 35, 676, DateTimeKind.Utc).AddTicks(7770),
                            FromState = 6,
                            Order = 4,
                            RequiredRole = 6,
                            ToState = 8,
                            WorkflowId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Task", b =>
                {
                    b.HasOne("StellarAnvil.Domain.Entities.TeamMember", "Assignee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StellarAnvil.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TaskHistory", b =>
                {
                    b.HasOne("StellarAnvil.Domain.Entities.Task", "Task")
                        .WithMany("TaskHistories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StellarAnvil.Domain.Entities.TeamMember", "TeamMember")
                        .WithMany("TaskHistories")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Task");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("StellarAnvil.Domain.Entities.Task", "CurrentTask")
                        .WithMany()
                        .HasForeignKey("CurrentTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentTask");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.WorkflowTransition", b =>
                {
                    b.HasOne("StellarAnvil.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Transitions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Task", b =>
                {
                    b.Navigation("TaskHistories");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TeamMember", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("TaskHistories");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Workflow", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("Transitions");
                });
#pragma warning restore 612, 618
        }
    }
}
