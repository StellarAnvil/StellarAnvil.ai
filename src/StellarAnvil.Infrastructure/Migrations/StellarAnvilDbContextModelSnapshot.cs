// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StellarAnvil.Infrastructure.Data;

#nullable disable

namespace StellarAnvil.Infrastructure.Migrations
{
    [DbContext(typeof(StellarAnvilDbContext))]
    partial class StellarAnvilDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StellarAnvil.Domain.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ApiKeys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 992, DateTimeKind.Utc).AddTicks(440),
                            IsActive = true,
                            Key = "sk-admin-d7d994a8004e4fc9bae8fe6e57508f21",
                            Name = "Default Admin Key",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 992, DateTimeKind.Utc).AddTicks(650),
                            IsActive = true,
                            Key = "sk-openapi-a1fc7b6261d24c6cb383904db8d4561d",
                            Name = "Default OpenAPI Key",
                            Type = 2
                        });
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.McpConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Configuration")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Type")
                        .IsUnique();

                    b.ToTable("McpConfigurations");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentState")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromState")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeamMemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("ToState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrentTaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SystemPromptFile")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTaskId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Workflows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 990, DateTimeKind.Utc).AddTicks(6240),
                            Description = "Complete software development lifecycle with all phases",
                            IsDefault = true,
                            Name = "Full SDLC Workflow",
                            UpdatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 990, DateTimeKind.Utc).AddTicks(6390)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2370),
                            Description = "Standard software development lifecycle without UX design",
                            IsDefault = true,
                            Name = "Standard SDLC Workflow",
                            UpdatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2370)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2480),
                            Description = "Simplified software development lifecycle for small changes",
                            IsDefault = true,
                            Name = "Simple SDLC Workflow",
                            UpdatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2480)
                        });
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.WorkflowTransition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromState")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredRole")
                        .HasColumnType("integer");

                    b.Property<int>("ToState")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId", "FromState", "ToState")
                        .IsUnique();

                    b.ToTable("WorkflowTransitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d787537d-d9f1-4af9-93a2-df6fc030311b"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2020),
                            FromState = 1,
                            Order = 1,
                            RequiredRole = 1,
                            ToState = 2,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("aa84c04a-4aad-4bfa-a4dc-6ba6e8a3dc4a"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2240),
                            FromState = 2,
                            Order = 2,
                            RequiredRole = 2,
                            ToState = 3,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("25037b20-3ed2-4256-808d-54a6955ec8bd"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2240),
                            FromState = 3,
                            Order = 3,
                            RequiredRole = 3,
                            ToState = 4,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("921140f8-ef12-42c1-a4a5-9fa9ae4782cb"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2250),
                            FromState = 4,
                            Order = 4,
                            RequiredRole = 4,
                            ToState = 5,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("b96d5df0-7789-46ec-930d-48bfd024eca0"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2260),
                            FromState = 5,
                            Order = 5,
                            RequiredRole = 5,
                            ToState = 6,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("2cc41108-121e-4e1f-83dc-cbc079e1870f"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2270),
                            FromState = 6,
                            Order = 6,
                            RequiredRole = 6,
                            ToState = 8,
                            WorkflowId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("18cbd108-a2c0-4290-8d5d-4769fdfd6155"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2430),
                            FromState = 1,
                            Order = 1,
                            RequiredRole = 1,
                            ToState = 2,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("62ab0e6c-5a9c-4f07-a19d-f52adb81337f"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2430),
                            FromState = 2,
                            Order = 2,
                            RequiredRole = 2,
                            ToState = 3,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("59ea646d-1663-4516-8a26-761112b0eaf9"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2440),
                            FromState = 3,
                            Order = 3,
                            RequiredRole = 3,
                            ToState = 5,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("08d562ca-6018-4fd9-a3a6-8aa4976f9bcd"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2450),
                            FromState = 5,
                            Order = 4,
                            RequiredRole = 5,
                            ToState = 6,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("df52e2a5-158a-4484-af8d-b344deb7aa77"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2450),
                            FromState = 6,
                            Order = 5,
                            RequiredRole = 6,
                            ToState = 8,
                            WorkflowId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("1034ad6a-09f3-4793-9905-c6f4c48e25a0"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2500),
                            FromState = 1,
                            Order = 1,
                            RequiredRole = 1,
                            ToState = 2,
                            WorkflowId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("f6a960f0-00f0-4d94-871e-06b672f430c4"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2510),
                            FromState = 2,
                            Order = 2,
                            RequiredRole = 2,
                            ToState = 5,
                            WorkflowId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("9e5094e1-8f85-46a2-ad74-b620c2c793a7"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2520),
                            FromState = 5,
                            Order = 3,
                            RequiredRole = 5,
                            ToState = 6,
                            WorkflowId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("a52c9bfb-c662-4820-87f9-3dcf2d38a842"),
                            CreatedAt = new DateTime(2025, 9, 20, 10, 47, 45, 991, DateTimeKind.Utc).AddTicks(2520),
                            FromState = 6,
                            Order = 4,
                            RequiredRole = 6,
                            ToState = 8,
                            WorkflowId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Task", b =>
                {
                    b.HasOne("StellarAnvil.Domain.Entities.TeamMember", "Assignee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StellarAnvil.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TaskHistory", b =>
                {
                    b.HasOne("StellarAnvil.Domain.Entities.Task", "Task")
                        .WithMany("TaskHistories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StellarAnvil.Domain.Entities.TeamMember", "TeamMember")
                        .WithMany("TaskHistories")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Task");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("StellarAnvil.Domain.Entities.Task", "CurrentTask")
                        .WithMany()
                        .HasForeignKey("CurrentTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentTask");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.WorkflowTransition", b =>
                {
                    b.HasOne("StellarAnvil.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Transitions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Task", b =>
                {
                    b.Navigation("TaskHistories");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.TeamMember", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("TaskHistories");
                });

            modelBuilder.Entity("StellarAnvil.Domain.Entities.Workflow", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("Transitions");
                });
#pragma warning restore 612, 618
        }
    }
}
